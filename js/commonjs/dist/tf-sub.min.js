(function(){function debug(){return debug}function require(p,parent){var path=require.resolve(p),mod=require.modules[path];if(!mod)throw Error('failed to require "'+p+'" from '+parent);return mod.exports||(mod.exports={},mod.call(mod.exports,mod,mod.exports,require.relative(path),global)),mod.exports}var global=this;require.modules={},require.resolve=function(path){var orig=path,reg=path+".js",index=path+"/index.js";return require.modules[reg]&&reg||require.modules[index]&&index||orig},require.register=function(path,fn){require.modules[path]=fn},require.relative=function(parent){return function(p){if("debug"==p)return debug;if("."!=p.charAt(0))return require(p);var path=parent.split("/"),segs=p.split("/");path.pop();for(var i=0;segs.length>i;i++){var seg=segs[i];".."==seg?path.pop():"."!=seg&&path.push(seg)}return require(path.join("/"),parent)}},require.register("lib/Brovine.js",function(module,exports,require){require("./helpers/local-download"),module.exports={breadcrumb:require("./breadcrumb"),table:require("./table"),lvalueFilter:require("./lvalue-filter"),tooltip:require("./helpers/tooltips"),regInput:require("./helpers/reg-input"),selectAll:require("./helpers/select-all")}}),require.register("lib/breadcrumb.js",function(module){"use strict";module.exports=function(){var crumbData={},callbacks={},emit=function(table){$.each(callbacks,function(query,funcs){table.dt.is(query)&&$.each(funcs,function(i,item){item(crumbData)})})},update=function(match,data,table){var spec={};spec[match]=data,$.extend(crumbData,spec),emit(table)},register=function(match,func){callbacks[match]?callbacks[match].push(func):callbacks[match]=[func]},registerTableUpdate=function(from,clears,update,other){register(from.id,function(crumbData){update.dt.fnClearTable(),$.each(clears,function(i,item){item.dt.fnClearTable()}),jQuery.get("ajax/"+update.schema.url,crumbData,function(data){update.dt.fnClearTable(),update.dt.fnAddData(data),other&&other(data)},"json")})};return{update:update,emit:emit,register:register,registerTableUpdate:registerTableUpdate}}()}),require.register("lib/helpers/local-download.js",function(){(function($){$.fn.localDownload=function(opts){var settings=$.extend({filename:"temp_file",local:!0,serverType:"form",bounceUrl:"/ajax/saveFile"},opts),setHref=function(settings,data,scope){var header=settings.local?"data:octet-stream,":settings.bounceUrl;if(data){var requestLink;settings.local?requestLink=header+encodeURI(data):"form"===settings.serverType&&(requestLink="#"),$(scope).attr("href",requestLink)}else $(scope).attr("href","#")},createForm=function(data,url,filename){return $("<form></form>").hide().attr({target:"_blank",method:"post",action:url}).append($("<input />").attr({type:"hidden",name:"data",value:data})).append($("<input />").attr({type:"hidden",name:"filename",value:filename}))};return this.each(function(){setHref(settings,settings.data,this),settings.filename instanceof Function||$(this).attr("download",settings.filename),settings.func&&$(this).click(function(){var data=settings.func();return data?(settings.filename instanceof Function&&$(this).attr("download",settings.filename()),setHref(settings,data,this),settings.local||"form"!==settings.serverType?void 0:(createForm(data,settings.bounceUrl,settings.filename).submit(),!1)):(alert("No data to download"),!1)})})}})(jQuery)}),require.register("lib/helpers/reg-input.js",function(module){var RegFilter=function(elem,table,col,func){if(!(this instanceof RegFilter))return new RegFilter(elem,table,col,func);var that=this,names=[],updateRegFilter=function(elem){var tokens=$(elem).tokenInput("get");names=[],$.each(tokens,function(idx,item){names.push(item.name)})},fireToken=function(){updateRegFilter(elem),table.fnDraw(),func&&func()};$(elem).tokenInput("ajax/getRegHints",{onAdd:fireToken,onDelete:fireToken,theme:"facebook",preventDuplicates:!0,hintText:"Start typing a Regulation"});var getItems=function(){return names};this.getItems=getItems;var filter=function(oSettings,aData){if(oSettings.sTableId!=table.attr("id"))return!0;if(0==that.getItems().length)return!0;for(i=0;that.getItems().length>i;i++){var item=that.getItems()[i];if(item==aData[col])return!0}return!1};return $.fn.dataTableExt.afnFiltering.push(filter),this};module.exports={RegFilter:RegFilter}}),require.register("lib/helpers/select-all.js",function(module,exports,require){"use strict";var breadcrumb=require("../breadcrumb");module.exports=function(button,table){$(button).on("click",function(){var specs=[],items=table.dt.find("tr");items.removeClass("selected"),items.addClass("selected"),table.dt.$("tr.selected").each(function(i){var row=table.dt.fnGetData(this);specs[i]=row[table.schema.crumb]}),specs.length>0&&breadcrumb.update(table.schema.crumb,specs,table)})}}),require.register("lib/helpers/tooltips.js",function(module){module.exports=function(){var tooltips={th:{Chr:"Chromosome",Reg:"Regulation",Gene:"Hover for full name",Factors:"Unique factor / study pairs",Genes:"Total number of genes","#":"Number of matching regulatory elements"}},init=function(){$.each(tooltips.th,function(key,value){$("th:contains("+key+")").tooltip({title:value})}),$("#geneList").tooltip({selector:"td:first-child",title:function(){if($(this).hasClass("dataTables_empty"))return"Select an experiment first.";var row=$(this).parent()[0],rowData=geneList.fnGetData(row);return rowData.genename}}),$("#sequenceList").tooltip({selector:"td:nth-child(2)",title:function(){if($(this).hasClass("dataTables_empty"))return"Select a factor first.";var row=$(this).parent()[0],rowData=sequenceList.fnGetData(row);return rowData.genename}})};return{init:init}}()}),require.register("lib/lvalue-filter.js",function(module,exports,require){var breadcrumb=require("./breadcrumb"),tables=[],filterSequenceList=function(oSettings,aData){return aData[3]>=minBegVal&&maxBegVal>=aData[3]&&(aData[5]==senseFilterVal||"all"==senseFilterVal)&&aData[6]>=minLaVal&&aData[7]>=minLaSlashVal&&aData[8]>=minLqVal&&maxLdVal>=aData[9]},init=function(id){breadcrumb.register(id,function(){$.each(tables,function(i,table){table.fnDraw()})}),$(id).on("change","input",function(event){var target=$(event.currentTarget);target.is("[type=radio]")?breadcrumb.update(target.closest("[id]").attr("id"),target.val(),{dt:$(id)}):breadcrumb.update(target.attr("id"),target.val(),{dt:$(id)})}),jQuery.get("ajax/getMetricExtremes",function(data){jQuery.each(data,function(i,val){data[i]=parseFloat(val)}),points={la:{min:data.la_min,max:data.la_max},la_slash:{min:data.las_min,max:data.las_max},lq:{min:data.lq_min,max:data.lq_max},ld:{min:data.ld_min,max:data.ld_max}},$(id+" input[type='text']").val("");var idx=0;jQuery.each(points,function(i,val){$(id+" input[type='text']:eq("+idx+")").attr("placeholder",val.min+" - "+val.max),idx++}),$(id+" input[type='text']").removeAttr("disabled")},"json")},addTable=function(table){tables.push(table.dt),$.fn.dataTableExt.afnFiltering.push(function(oSettings,aData,iDataIndex){oSettings.sTableId==table.id&&filterSequenceList(oSettings,aData,iDataIndex,table)})};module.exports={add:addTable,init:init}}),require.register("lib/table.js",function(module,exports,require){"use strict";var breadcrumb=require("./breadcrumb"),tableSchema={species:{crumb:"species",url:"getSpeciesList",sSearch:"Search Species",aoColumns:[{sTitle:"Species",mDataProp:"speciesPretty"},{sTitle:"SpeciesLower",mDataProp:"species",bVisible:!1}]},comparison:{crumb:"comparisontypeid",url:"getComparisonList",sSearch:"Search Comparisons",aoColumns:[{sTitle:"Comparison",mDataProp:"comparison"},{sTitle:"ComparisonTypeId",mDataProp:"comparisontypeid",bVisible:!1}]},experiment:{crumb:"experimentid",url:"getExperimentList",sSearch:"Search Experiments",aoColumns:[{sTitle:"Experiment",mDataProp:"label"},{sTitle:"Gene Count",mDataProp:"genecount_all"},{sTitle:"Experimentid",mDataProp:"experimentid",bVisible:!1}]},gene:{crumb:"geneid",url:"getGeneList",sSearch:"Search Genes",aoColumns:[{sTitle:"Gene",mDataProp:"geneabbrev"},{sTitle:"Species",mDataProp:"species"},{sTitle:"Comparison",mDataProp:"celltype"},{sTitle:"Experiment",mDataProp:"label"},{sTitle:"Reg",mDataProp:"regulation"},{sTitle:"Geneid",mDataProp:"geneid",bVisible:!1},{sTitle:"GeneName",mDataProp:"genename",bVisible:!1}]},factor:{crumb:"transfac",url:"getFactorList",sSearch:"Search Transfacs",aoColumns:[{sTitle:"Factor",mDataProp:"transfac"},{sTitle:"(#) Genes",mDataProp:"numGenes"},{sTitle:"(#) Occurs",mDataProp:"numTimes"},{sTitle:"AllRow",mDataProp:"allRow",bVisible:!1}]}},NewTable=function(id,schema,height){var that=this;return this instanceof NewTable?(this.dt=$(id).dataTable({sDom:"<<f>r>t<i>",sPaginationType:"bootstrap",bFilter:!0,bPaginate:!1,bInfo:!1,sScrollY:height,oLanguage:{sSearch:schema.sSearch},aoColumns:schema.aoColumns}),this.dt.on("click","tr",function(e){e.metaKey||e.ctrlKey||that.dt.$("tr").removeClass("selected"),$(this).toggleClass("selected"),that.updateCrumb()}),this.schema=schema,this.id=id,this.fixWidth(),setupPlaceholder(this.dt),this):new NewTable(id,schema,height)},setupPlaceholder=function(table){for(var label=table.parents(".dataTables_wrapper").find(".dataTables_filter label"),text=label.text(),input=label.children("input"),i=0;label[0].childNodes.length>i;i++){var child=label[0].childNodes[i];3==child.nodeType&&label[0].removeChild(child)}input.attr("placeholder",text),input.width($(this).parent().width()-10)};NewTable.prototype.fixWidth=function(){this.dt.css("width","100%"),$(".dataTables_filter input").each(function(){$(this).width($(this).parent().width()-10)})};var fixAllWidths=function(){$("table.dataTable").each(function(){})};NewTable.prototype.findColumn=function(mDataProp){var ret=-1;return this.schema.aoColumns.forEach(function(val,idx){val.mDataProp===mDataProp&&(ret=idx)}),ret},NewTable.prototype.getSelectedData=function(col){var specs=[],that=this;return this.dt.$("tr.selected").each(function(i){var row=that.dt.fnGetData(this);specs[i]=row[col]}),specs},NewTable.prototype.updateCrumb=function(){var specs=this.getSelectedData(this.schema.crumb);return specs.length>0&&(breadcrumb.update(this.schema.crumb,specs,this),fixAllWidths()),specs},NewTable.prototype.getVisibleColumns=function(){var vis=[];return this.schema.aoColumns.forEach(function(col){void 0!==col.bVisible&&col.bVisible||vis.push(col)}),vis},NewTable.prototype.getVisibleColumnNames=function(){var headers=[],columns=this.getVisibleColumns();return columns.forEach(function(col){headers.push(col.mDataProp)}),headers},NewTable.prototype.getCSVData=function(includeHeaders){var hdrData,data=this.dt.fnGetData(),visCols=this.getVisibleColumnNames(),csvData="",start=!0,inclHdrs=includeHeaders||!0;hdrData=visCols.reduce(function(prev,cur){return""+prev+", "+cur});for(var i=0;data.length>i;i++){start=!0;for(key in objs)start||(csvData+=", "),csvData+=data[i][objs[key].mDataProp],start=!1;csvData+="\n"}return inclHdrs?(hdrData||"")+(csvData||""):csvData||""},NewTable.prototype.getUniqueName=function(col,prefix){var prefix=prefix||"brovine-data-",selected=this.getSelectedData(col);return prefix+selected.reduce(function(prev,cur){return""+prev+"-"+cur})},module.exports={Table:NewTable,schema:tableSchema,fixAllWidths:fixAllWidths}});var exp=require("lib/Brovine");"undefined"!=typeof module?module.exports=exp:Brovine=exp})(),$(window).load(function(){var Table=Brovine.table.Table,schemas=Brovine.table.schema,bread=Brovine.breadcrumb,SelectAll=Brovine.selectAll,RegFilter=Brovine.regInput.RegFilter,LvalueFilter=Brovine.lvalueFilter,speciesList=new Table("#speciesList",schemas.species,"100px"),comparisonList=new Table("#comparisonList",schemas.comparison,"100px"),experimentList=new Table("#experimentList",schemas.experiment,"100px"),geneList1=new Table("#geneList1",schemas.gene,"150px"),geneList2=new Table("#geneList2",schemas.gene,"150px"),factorList1=new Table("#factorList1",schemas.factor,"150px"),factorList2=new Table("#factorList2",schemas.factor,"150px"),subtractList=new Table("#subtractList",schemas.factor,"150px");new RegFilter("#regFilter1",geneList1.dt,4),new RegFilter("#regFilter2",geneList2.dt,4),SelectAll("#selectAllGenes1",geneList1),SelectAll("#selectAllGenes2",geneList2),bread.registerTableUpdate(speciesList,[experimentList,geneList1,geneList2,factorList1,factorList2],comparisonList),bread.registerTableUpdate(comparisonList,[geneList1,geneList2,factorList1,factorList2],experimentList),bread.registerTableUpdate(experimentList,[factorList1,factorList2],geneList1),bread.registerTableUpdate(experimentList,[factorList1,factorList2],geneList2),LvalueFilter.init("#sequenceFilterOptions");var updateSubtract=function(){var data=[],data1=factorList1.dt._("tr",{filter:"applied"}),data2=factorList2.dt._("tr",{filter:"applied"});if(data1&&data2&&0!==data1.length&&0!==data2.length){for(var i=0;data1.length>i;i++){for(var include=!0,j=0;data2.length>j;j++)if(data1[i].transfac===data2[j].transfac){include=!1;break}include&&data.push(data1[i])}subtractList.dt.fnClearTable(),subtractList.dt.fnAddData(data)}};bread.registerTableUpdate(geneList1,[],factorList1,updateSubtract),bread.registerTableUpdate(geneList2,[],factorList2,updateSubtract),bread.register("#sequenceFilterOptions",function(){geneList1.updateCrumb(),bread.emit(geneList1),geneList2.updateCrumb(),bread.emit(geneList2)}),$("#geneExport1").localDownload({func:geneList1.getCSVData.bind(geneList1),filename:experimentList.getUniqueName.bind(experimentList,"label","gene-data-")}),$("#geneExport2").localDownload({func:geneList2.getCSVData.bind(geneList2),filename:experimentList.getUniqueName.bind(experimentList,"label","gene-data-")}),$("#subtractExport").localDownload({func:subtractList.getCSVData.bind(subtractList),filename:geneList1.getUniqueName.bind(geneList1,"geneabbrev","factor-data-")}),jQuery.get("ajax/getSpeciesList",{},function(data){speciesList.dt.fnClearTable(),speciesList.dt.fnAddData(data)},"json")});